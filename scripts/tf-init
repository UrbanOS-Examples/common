#!/usr/bin/env bash

help() {
    cat <<EOF
Usage: ${0} [OPTIONS]
Specialized Terraform initialization script for the Smart Columbus Operating System.  Used
to help with the flags and file state requirements for running a terraform init, and to help
users select a workspace before attempting to manipulate resources.

Options:
--sandbox                    Initialize Terraform to use the sandbox backend config.  If not
                             passed, the alm backend config will be used
-w, --workspace <workspace>  The workspace to select/create after being initialized. If
                             not passed, you will be prompted to select or create a workspace
-h, --help
EOF
}

_die() {
    echo "${@}"
    exit 1
}

_file() {
    filename="${1}"
    [ -f "${filename}" ] || return 1
    echo ${filename}
}

_get_tfvar() {
    varfile=$(_file "${1}") || _die "Failed to load var file \"${1}\""
    variable=${2}

    (
    source <(sed 's/ = /=/' ${varfile})
    echo ${!variable}
    )
}

set -o pipefail

git_root=$(git rev-parse --show-toplevel) || _die "Failed to resolve git_root.  Are you in a git repository?"

backend_config="${git_root}/backends/alm.conf"

until [ ${#} -eq 0 ]; do
    case "${1}" in
        --sandbox)
            backend_config="${git_root}/backends/sandbox-alm.conf"
            ;;
        -w|--workspace)
            workspace=${2}
            shift
            ;;
        -h|--help)
            help
            exit 0
            ;;
    esac
    shift
done

vars_file=$(_file "variables/${workspace}.tfvars" || _file "variables/sandbox.tfvars") ||
    _die "Failed to find a tfvars file for the workspace \"${workspace}\""
echo "Using \"${vars_file}\""

enabled_features=$(_get_tfvar "${vars_file}" enabled_features)

rm -f _feature*.tf
for feature in ${enabled_features}; do
    echo "enabling feature ${feature}"
    feature_file=$(_file ${PWD}/"features/${feature}.hcl") ||
        _die "Cannot find file for feature \"${feature}\" (${feature_file})"

    ln -s "${feature_file}" _feature_"${feature}".tf || _die "failed adding feature"
done

echo "removing .terraform"
rm -rf .terraform

echo "initializing terraform"
terraform init -backend-config=${backend_config} || _die "Failed to initialize terraform"

workspaces=$(terraform workspace list | cut -c 3- | sort -f | tail -n +2) || _die "Failed to list workspaces"

if [ -z "${workspace}" ]; then
    echo "Workspaces available:"
    echo "${workspaces}"
    echo

    read -p "Select a workspace or name a new one to be created: " workspace
fi

if (echo "${workspaces}" | grep -xq ${workspace}); then
    terraform workspace select ${workspace} || _die "Failed to select workspace \"${workspace}\""
else
    terraform workspace new ${workspace} || _die "Failed to create new workspace \"${workspace}\""
fi

exit 0
